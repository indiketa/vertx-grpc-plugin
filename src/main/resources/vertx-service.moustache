
{{#packageName}}
package {{packageName}};
{{/packageName}}

{{#methods}}
import static {{packageName}}.{{serviceName}}Grpc.get{{methodNamePascalCase}}Method;
{{/methods}}

import static {{packageName}}.{{serviceName}}Grpc.getServiceDescriptor;

import io.grpc.BindableService;
import io.grpc.Channel;
import io.grpc.CallOptions;
import io.grpc.ServerServiceDefinition;
import io.grpc.stub.AbstractStub;
import io.grpc.stub.StreamObserver;
import static io.grpc.stub.ClientCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ClientCalls.asyncClientStreamingCall;
import static io.grpc.stub.ClientCalls.asyncServerStreamingCall;
import static io.grpc.stub.ClientCalls.asyncUnaryCall;
import static io.grpc.stub.ServerCalls.asyncUnaryCall;
import static io.grpc.stub.ServerCalls.asyncServerStreamingCall;
import static io.grpc.stub.ServerCalls.asyncClientStreamingCall;
import static io.grpc.stub.ServerCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall;

import io.vertx.core.AsyncResult;
import io.vertx.core.Future;
import io.vertx.core.Handler;
import io.vertx.grpc.GrpcBidiExchange;
import io.vertx.grpc.GrpcReadStream;
import io.vertx.grpc.GrpcWriteStream;
import io.vertx.grpc.GrpcUniExchange;{{#deprecated}}
@Deprecated{{/deprecated}}

@javax.annotation.Generated(
    value = "by gRPC JDK 8 - vertx-grpc-plugin",
    comments = "Source: {{protoName}}")
public class {{className}} {

    private {{className}}() {}

    {{#methods}}
    private static final int METHODID_{{methodNameUpperUnderscore}} = {{methodNumber}};
    {{/methods}}

    {{#javaDoc}}{{{javaDoc}}}{{/javaDoc}}
    public static final class {{serviceName}}VertxStub extends AbstractStub<{{serviceName}}VertxStub> {

        private {{serviceName}}VertxStub(Channel channel) {
            super(channel);
        }

        private {{serviceName}}VertxStub(Channel channel, CallOptions callOptions) {
            super(channel, callOptions);
        }

        @Override
        protected {{serviceName}}VertxStub build(Channel channel, CallOptions callOptions) {
            return new {{serviceName}}VertxStub(channel, callOptions);
        }
        {{#methods}}

            {{#javaDoc}}
        {{{javaDoc}}}
            {{/javaDoc}}
            {{#deprecated}}
        @java.lang.Deprecated
            {{/deprecated}}
        @SuppressWarnings("unchecked")
        public void {{methodName}}({{{clientMethodSignature}}}) {
            {{^isManyInput}}
                {{^isManyOutput}}
                {{grpcCallsMethodName}}(getChannel().newCall(get{{methodNamePascalCase}}Method(), getCallOptions()), request, toObserver(handler));
                {{/isManyOutput}}
                {{#isManyOutput}}
                GrpcReadStream<{{outputType}}> rs = GrpcReadStream.<{{outputType}}>create();
                handler.handle(rs);
                {{grpcCallsMethodName}}(getChannel().newCall(get{{methodNamePascalCase}}Method(), getCallOptions()), request, rs.readObserver());
                {{/isManyOutput}}
            {{/isManyInput}}
            {{#isManyInput}}
                GrpcReadStream<{{outputType}}> rs = GrpcReadStream.<{{outputType}}>create();
                {{^isManyOutput}}
                handler.handle(GrpcUniExchange.create(rs, {{grpcCallsMethodName}}(getChannel().newCall(get{{methodNamePascalCase}}Method(), getCallOptions()), rs.readObserver())));
                {{/isManyOutput}}
                {{#isManyOutput}}
                handler.handle(GrpcBidiExchange.create(rs, {{grpcCallsMethodName}}(getChannel().newCall(get{{methodNamePascalCase}}Method(), getCallOptions()), rs.readObserver())));
                {{/isManyOutput}}
            {{/isManyInput}}
        }
        {{/methods}}
    }


    {{#javaDoc}}{{{javaDoc}}}{{/javaDoc}}
    public static abstract class {{serviceName}}VertxImplBase implements BindableService {
        {{#methods}}

            {{#javaDoc}}
        {{{javaDoc}}}
            {{/javaDoc}}
            {{#deprecated}}
        @java.lang.Deprecated
            {{/deprecated}}
        @SuppressWarnings("unchecked")
        public void {{methodName}}({{{serverMethodSignature}}}) {
            {{^isManyInput}}
                {{^isManyOutput}}
                {{grpcServerCallsMethodName}}(get{{methodNamePascalCase}}Method(), toObserver(response.completer()));
                {{/isManyOutput}}
                {{#isManyOutput}}
                {{grpcServerCallsMethodName}}(get{{methodNamePascalCase}}Method(), response.writeObserver());
                {{/isManyOutput}}
            {{/isManyInput}}
            {{#isManyInput}}
                {{^isManyOutput}}
                request.setReadObserver({{grpcServerCallsMethodName}}(get{{methodNamePascalCase}}Method(), toObserver(response.completer())));
                {{/isManyOutput}}
                {{#isManyOutput}}
                exchange.setReadObserver({{grpcServerCallsMethodName}}(get{{methodNamePascalCase}}Method(), exchange.writeObserver()));
                {{/isManyOutput}}
            {{/isManyInput}}
        }
        {{/methods}}

        @Override
        public final ServerServiceDefinition bindService() {
            return ServerServiceDefinition.builder(getServiceDescriptor())
                    {{#methods}}
                    .addMethod(
                        get{{methodNamePascalCase}}Method(),
                        {{grpcCallsMethodName}}(new VertxMethodHandlers<{{inputType}},{{outputType}}>(this, METHODID_{{methodNameUpperUnderscore}})))
                    {{/methods}}
                    .build();
        }
    }

    private static final class VertxMethodHandlers<I, O> implements
            io.grpc.stub.ServerCalls.UnaryMethod<I, O>,
            io.grpc.stub.ServerCalls.ServerStreamingMethod<I, O>,
            io.grpc.stub.ServerCalls.ClientStreamingMethod<I, O>,
            io.grpc.stub.ServerCalls.BidiStreamingMethod<I, O> {

        private final {{serviceName}}VertxImplBase serviceImpl;
        private final int methodId;

        VertxMethodHandlers({{serviceName}}VertxImplBase serviceImpl, int methodId) {
            this.serviceImpl = serviceImpl;
            this.methodId = methodId;
        }

        @Override
        @SuppressWarnings("unchecked")
        public void invoke(I request, StreamObserver<O> responseObserver) {
            switch (methodId) {
            {{#unaryUnaryMethods}}
                case METHODID_{{methodNameUpperUnderscore}}:
                    serviceImpl.{{methodName}}(({{inputType}}) request, (Future<{{outputType}}>) Future.<{{outputType}}>future().setHandler( ar -> {
                        if (ar.succeeded()) {
                            ((StreamObserver<{{outputType}}>) responseObserver).onNext(ar.result());
                            responseObserver.onCompleted();
                        } else {
                            responseObserver.onError(ar.cause());
                        }
                    }));
                    break;
            {{/unaryUnaryMethods}}
            {{#unaryManyMethods}}
                case METHODID_{{methodNameUpperUnderscore}}:
                    serviceImpl.{{methodName}}(({{inputType}}) request, (GrpcWriteStream<{{outputType}}>) GrpcWriteStream.create(responseObserver));
                    break;
            {{/unaryManyMethods}}
                default:
                    throw new AssertionError();
            }
        }

        @Override
        @SuppressWarnings("unchecked")
        public StreamObserver<I> invoke(StreamObserver<O> responseObserver) {
            switch (methodId) {
            {{#manyUnaryMethods}}
                case METHODID_{{methodNameUpperUnderscore}}:
                    GrpcReadStream<{{inputType}}> request{{methodNumber}} = GrpcReadStream.<{{inputType}}>create();
                    serviceImpl.{{methodName}}(request{{methodNumber}}, Future.<{{outputType}}>future().setHandler(ar -> {
                        if (ar.succeeded()) {
                            ((StreamObserver<{{outputType}}>) responseObserver).onNext(ar.result());
                            responseObserver.onCompleted();
                        } else {
                            responseObserver.onError(ar.cause());
                        }
                    }));
                    return (StreamObserver<I>) request{{methodNumber}}.readObserver();
            {{/manyUnaryMethods}}
            {{#manyManyMethods}}
                case METHODID_{{methodNameUpperUnderscore}}:
                    GrpcReadStream<{{inputType}}> request{{methodNumber}} = GrpcReadStream.<{{inputType}}>create();
                    serviceImpl.{{methodName}}(GrpcBidiExchange.<{{inputType}}, {{outputType}}>create(
                            request{{methodNumber}},
                            (StreamObserver<{{outputType}}>) responseObserver));
                    return (StreamObserver<I>) request{{methodNumber}}.readObserver();
            {{/manyManyMethods}}

                default:
                    throw new AssertionError();
            }
        }
    }

    // Maybe: This should be included in vertx-grpc project
    private static <T> StreamObserver<T> toObserver(Handler<AsyncResult<T>> handler) {
        return new io.grpc.stub.StreamObserver<T>() {
            private volatile boolean resolved = false;

            @Override
            public void onNext(T value) {
                if (!resolved) {
                    resolved = true;
                    handler.handle(Future.succeededFuture(value));
                }
            }

            @Override
            public void onError(Throwable t) {
                if (!resolved) {
                    resolved = true;
                    handler.handle(Future.failedFuture(t));
                }
            }

            @Override
            public void onCompleted() {
                if (!resolved) {
                    resolved = true;
                    handler.handle(Future.succeededFuture());
                }
            }
        };
    }

}
