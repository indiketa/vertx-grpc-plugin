{{#packageName}}
package {{packageName}};
{{/packageName}}

{{#methods}}
import static {{packageName}}.{{serviceName}}Grpc.get{{methodNamePascalCase}}Method;
{{/methods}}

import static {{packageName}}.{{serviceName}}Grpc.getServiceDescriptor;

import io.grpc.BindableService;
import io.grpc.Channel;
import io.grpc.CallOptions;
import io.grpc.ServerServiceDefinition;
import io.grpc.stub.AbstractStub;
import io.grpc.stub.StreamObserver;
import static io.grpc.stub.ClientCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ClientCalls.asyncClientStreamingCall;
import static io.grpc.stub.ClientCalls.asyncServerStreamingCall;
import static io.grpc.stub.ClientCalls.asyncUnaryCall;
import static io.grpc.stub.ServerCalls.asyncUnaryCall;
import static io.grpc.stub.ServerCalls.asyncServerStreamingCall;
import static io.grpc.stub.ServerCalls.asyncClientStreamingCall;
import static io.grpc.stub.ServerCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall;

import io.vertx.core.AsyncResult;
import io.vertx.core.Future;
import io.vertx.core.Handler;
import io.vertx.grpc.GrpcBidiExchange;
import io.vertx.grpc.GrpcReadStream;
import io.vertx.grpc.GrpcWriteStream;
import io.vertx.grpc.GrpcUniExchange;{{#deprecated}}
@Deprecated{{/deprecated}}

@javax.annotation.Generated(
    value = "by vertx-grpc-plugin",
    comments = "Source: {{protoName}}")
public class {{className}} {

    private {{className}}() {}

    {{#methods}}
    private static final int METHODID_{{methodNameUpperUnderscore}} = {{methodNumber}};
    {{/methods}}

    public static {{serviceName}}VertxStub new{{serviceName}}VertxStub(Channel channel) {
        return new {{serviceName}}VertxStub(channel);
    }

    public static {{serviceName}}VertxStub new{{serviceName}}VertxStub(Channel channel, CallOptions callOptions) {
        return new {{serviceName}}VertxStub(channel, callOptions);
    }

    {{#javaDoc}}{{{javaDoc}}}{{/javaDoc}}
    public static final class {{serviceName}}VertxStub extends AbstractStub<{{serviceName}}VertxStub> {

        private {{serviceName}}VertxStub(Channel channel) {
            super(channel);
        }

        private {{serviceName}}VertxStub(Channel channel, CallOptions callOptions) {
            super(channel, callOptions);
        }

        @Override
        protected {{serviceName}}VertxStub build(Channel channel, CallOptions callOptions) {
            return new {{serviceName}}VertxStub(channel, callOptions);
        }

        {{#unaryUnaryMethods}}
        {{{methodHeader}}}
        public void {{methodName}}({{inputType}} request, Handler<AsyncResult<{{outputType}}>> handler) {
            {{grpcCallsMethodName}}(getChannel().newCall(get{{methodNamePascalCase}}Method(), getCallOptions()), request, toObserver(handler));
        }
        {{/unaryUnaryMethods}}

        {{#unaryManyMethods}}
        {{{methodHeader}}}
        public void {{methodName}}({{inputType}} request, Handler<GrpcReadStream<{{outputType}}>> handler) {
            GrpcReadStream<{{outputType}}> rs = GrpcReadStream.<{{outputType}}>create();
            handler.handle(rs);
            {{grpcCallsMethodName}}(getChannel().newCall(get{{methodNamePascalCase}}Method(), getCallOptions()), request, rs.readObserver());
        }
        {{/unaryManyMethods}}

        {{#manyUnaryMethods}}
        {{{methodHeader}}}
        public void {{methodName}}(Handler<GrpcUniExchange<{{inputType}}, {{outputType}}>> handler) {
            GrpcReadStream<{{outputType}}> rs = GrpcReadStream.<{{outputType}}>create();
            handler.handle(GrpcUniExchange.create(rs, {{grpcCallsMethodName}}(getChannel().newCall(get{{methodNamePascalCase}}Method(), getCallOptions()), rs.readObserver())));
        }
        {{/manyUnaryMethods}}

        {{#manyManyMethods}}
        {{{methodHeader}}}
        public void {{methodName}}(Handler<GrpcBidiExchange<{{outputType}}, {{inputType}}>> handler) {
            GrpcReadStream<{{outputType}}> rs = GrpcReadStream.<{{outputType}}>create();
            handler.handle(GrpcBidiExchange.create(rs, {{grpcCallsMethodName}}(getChannel().newCall(get{{methodNamePascalCase}}Method(), getCallOptions()), rs.readObserver())));
        }
        {{/manyManyMethods}}
    }


    {{#javaDoc}}{{{javaDoc}}}{{/javaDoc}}
    public static abstract class {{serviceName}}VertxImplBase implements BindableService {

        {{#unaryUnaryMethods}}
        {{{methodHeader}}}
        public void {{methodName}}({{inputType}} request, Handler<AsyncResult<{{outputType}}>> handler) {
            {{grpcServerCallsMethodName}}(get{{methodNamePascalCase}}Method(), toObserver(handler));
        }
        {{/unaryUnaryMethods}}
        
        {{#unaryManyMethods}}
        {{{methodHeader}}}
        public void {{methodName}}({{inputType}} request, GrpcWriteStream<{{outputType}}> response) {
            {{grpcServerCallsMethodName}}(get{{methodNamePascalCase}}Method(), response.writeObserver());
        }
        {{/unaryManyMethods}}
        
        {{#manyUnaryMethods}}
        {{{methodHeader}}}
        public void {{methodName}}(GrpcReadStream<{{inputType}}> request, Handler<AsyncResult<{{outputType}}>> handler) {
            request.setReadObserver({{grpcServerCallsMethodName}}(get{{methodNamePascalCase}}Method(), toObserver(handler)));
        }
        {{/manyUnaryMethods}}
        
        {{#manyManyMethods}}
        {{{methodHeader}}}
        public void {{methodName}}(GrpcBidiExchange<{{inputType}}, {{outputType}}> exchange) {
            exchange.setReadObserver({{grpcServerCallsMethodName}}(get{{methodNamePascalCase}}Method(), exchange.writeObserver()));
        }
        {{/manyManyMethods}}        

        @Override
        public final ServerServiceDefinition bindService() {
            return ServerServiceDefinition.builder(getServiceDescriptor())
                    {{#methods}}
                    .addMethod(
                        get{{methodNamePascalCase}}Method(),
                        {{grpcCallsMethodName}}(new VertxMethodHandlers<{{inputType}},{{outputType}}>(this, METHODID_{{methodNameUpperUnderscore}})))
                    {{/methods}}
                    .build();
        }
    }

    private static final class VertxMethodHandlers<I, O> implements
            io.grpc.stub.ServerCalls.UnaryMethod<I, O>,
            io.grpc.stub.ServerCalls.ServerStreamingMethod<I, O>,
            io.grpc.stub.ServerCalls.ClientStreamingMethod<I, O>,
            io.grpc.stub.ServerCalls.BidiStreamingMethod<I, O> {

        private final {{serviceName}}VertxImplBase serviceImpl;
        private final int methodId;

        VertxMethodHandlers({{serviceName}}VertxImplBase serviceImpl, int methodId) {
            this.serviceImpl = serviceImpl;
            this.methodId = methodId;
        }

        @Override
        @SuppressWarnings("unchecked")
        public void invoke(I request, StreamObserver<O> responseObserver) {
            switch (methodId) {
            {{#unaryUnaryMethods}}
                case METHODID_{{methodNameUpperUnderscore}}:
                    serviceImpl.{{methodName}}(({{inputType}}) request, ar -> {
                        if (ar.succeeded()) {
                            ((StreamObserver<{{outputType}}>) responseObserver).onNext(ar.result());
                            responseObserver.onCompleted();
                        } else {
                            responseObserver.onError(ar.cause());
                        }
                    });
                    break;
            {{/unaryUnaryMethods}}
            {{#unaryManyMethods}}
                case METHODID_{{methodNameUpperUnderscore}}:
                    serviceImpl.{{methodName}}(({{inputType}}) request, (GrpcWriteStream<{{outputType}}>) GrpcWriteStream.create(responseObserver));
                    break;
            {{/unaryManyMethods}}
                default:
                    throw new AssertionError();
            }
        }

        @Override
        @SuppressWarnings("unchecked")
        public StreamObserver<I> invoke(StreamObserver<O> responseObserver) {
            switch (methodId) {
            {{#manyUnaryMethods}}
                case METHODID_{{methodNameUpperUnderscore}}:
                    GrpcReadStream<{{inputType}}> request{{methodNumber}} = GrpcReadStream.<{{inputType}}>create();
                    serviceImpl.{{methodName}}(request{{methodNumber}}, ar -> {
                        if (ar.succeeded()) {
                            ((StreamObserver<{{outputType}}>) responseObserver).onNext(ar.result());
                            responseObserver.onCompleted();
                        } else {
                            responseObserver.onError(ar.cause());
                        }
                    });
                    return (StreamObserver<I>) request{{methodNumber}}.readObserver();
            {{/manyUnaryMethods}}
            {{#manyManyMethods}}
                case METHODID_{{methodNameUpperUnderscore}}:
                    GrpcReadStream<{{inputType}}> request{{methodNumber}} = GrpcReadStream.<{{inputType}}>create();
                    serviceImpl.{{methodName}}(GrpcBidiExchange.<{{inputType}}, {{outputType}}>create(
                            request{{methodNumber}},
                            (StreamObserver<{{outputType}}>) responseObserver));
                    return (StreamObserver<I>) request{{methodNumber}}.readObserver();
            {{/manyManyMethods}}

                default:
                    throw new AssertionError();
            }
        }
    }

    // Maybe: This should be included in vertx-grpc project
    private static <T> StreamObserver<T> toObserver(Handler<AsyncResult<T>> handler) {
        return new io.grpc.stub.StreamObserver<T>() {
            private volatile boolean resolved = false;

            @Override
            public void onNext(T value) {
                if (!resolved) {
                    resolved = true;
                    handler.handle(Future.succeededFuture(value));
                }
            }

            @Override
            public void onError(Throwable t) {
                if (!resolved) {
                    resolved = true;
                    handler.handle(Future.failedFuture(t));
                }
            }

            @Override
            public void onCompleted() {
                if (!resolved) {
                    resolved = true;
                    handler.handle(Future.succeededFuture());
                }
            }
        };
    }

}
